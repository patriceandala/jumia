// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product.sql

package db

import (
	"context"
)

const consumeProduct = `-- name: ConsumeProduct :one
UPDATE products
SET stock = stock - $1
WHERE sku = $2
  AND stock > $1
RETURNING sku, name, country, stock
`

type ConsumeProductParams struct {
	Stock int32  `json:"stock"`
	Sku   string `json:"sku"`
}

func (q *Queries) ConsumeProduct(ctx context.Context, arg ConsumeProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, consumeProduct, arg.Stock, arg.Sku)
	var i Product
	err := row.Scan(
		&i.Sku,
		&i.Name,
		&i.Country,
		&i.Stock,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products
    (sku, name, country)
VALUES ($1, $2, $3)
RETURNING sku, name, country, stock
`

type CreateProductParams struct {
	Sku     string `json:"sku"`
	Name    string `json:"name"`
	Country string `json:"country"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Sku, arg.Name, arg.Country)
	var i Product
	err := row.Scan(
		&i.Sku,
		&i.Name,
		&i.Country,
		&i.Stock,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT sku, name, country, stock
FROM products
WHERE sku = $1
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, sku string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, sku)
	var i Product
	err := row.Scan(
		&i.Sku,
		&i.Name,
		&i.Country,
		&i.Stock,
	)
	return i, err
}
