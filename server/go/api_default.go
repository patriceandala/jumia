/*
 * Jumia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"ProductSkuGet",
			strings.ToUpper("Get"),
			"/v1/product/{sku}",
			c.ProductSkuGet,
		},
		{
			"ProductSkuPatch",
			strings.ToUpper("Patch"),
			"/v1/product/{sku}",
			c.ProductSkuPatch,
		},
		{
			"ProductsPatch",
			strings.ToUpper("Patch"),
			"/v1/products",
			c.ProductsPatch,
		},
	}
}

// ProductSkuGet - Get a product by SKU
func (c *DefaultApiController) ProductSkuGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sku := params["sku"]
	result, err := c.service.ProductSkuGet(r.Context(), sku)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProductSkuPatch - Consume a product. Checks if the product is available first
func (c *DefaultApiController) ProductSkuPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sku := params["sku"]
	result, err := c.service.ProductSkuPatch(r.Context(), sku)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProductsPatch - allows bulk update using CSV file
func (c *DefaultApiController) ProductsPatch(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	file, err := ReadFormFileToTempFile(r, "file")
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.ProductsPatch(r.Context(), file)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
